generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  id         String      @id @db.Uuid
  email      String      @unique
  name       String?
  imageUrl   String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  encounters Encounter[] @relation("EncounterCreatedBy")
  groups     Group[]
  people     Person[]
  reminders  Reminder[]
  tags       Tag[]
}

model Person {
  id          String             @id @default(uuid())
  userId      String             @db.Uuid
  name        String
  nickname    String?
  phonetic    String?
  notes       String?
  isFavorite  Boolean            @default(false)
  isArchived  Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  contacts    ContactMethod[]
  encounters  Encounter[]
  owner       UserProfile        @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments PersonAttachment[]
  groups      PersonGroup[]
  tags        PersonTag[]
  reminders   Reminder[]
  socials     SocialProfile[]

  @@unique([userId, name, nickname])
  @@index([userId])
  @@index([name])
}

model Tag {
  id        String      @id @default(uuid())
  userId    String      @db.Uuid
  name      String
  color     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  persons   PersonTag[]
  owner     UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId, name])
}

model PersonTag {
  personId String
  tagId    String
  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([personId, tagId])
  @@index([tagId])
}

model Group {
  id        String        @id @default(uuid())
  userId    String        @db.Uuid
  name      String
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  owner     UserProfile   @relation(fields: [userId], references: [id], onDelete: Cascade)
  persons   PersonGroup[]

  @@unique([userId, name])
  @@index([userId, name])
}

model PersonGroup {
  personId String
  groupId  String
  group    Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@id([personId, groupId])
  @@index([groupId])
}

model Encounter {
  id           String                @id @default(uuid())
  personId     String
  createdById  String                @db.Uuid
  happenedAt   DateTime
  title        String?
  note         String?
  source       SourceType            @default(MANUAL)
  locationText String?
  latitude     Decimal?              @db.Decimal(9, 6)
  longitude    Decimal?              @db.Decimal(9, 6)
  placeId      String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  createdBy    UserProfile           @relation("EncounterCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  person       Person                @relation(fields: [personId], references: [id], onDelete: Cascade)
  attachments  EncounterAttachment[]
  reminders    Reminder[]

  @@index([personId, happenedAt])
  @@index([createdById])
  @@index([happenedAt])
}

model ContactMethod {
  id        String      @id @default(uuid())
  personId  String
  type      ContactType
  value     String
  label     String?
  isPrimary Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  person    Person      @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([personId, type, value])
  @@index([personId, type])
}

model SocialProfile {
  id        String     @id @default(uuid())
  personId  String
  type      SocialType
  handle    String?
  url       String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  person    Person     @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([personId, type, handle])
  @@index([personId, type])
}

model PersonAttachment {
  id        String         @id @default(uuid())
  personId  String
  type      AttachmentType
  url       String
  title     String?
  meta      Json?
  createdAt DateTime       @default(now())
  person    Person         @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@index([personId, type])
}

model EncounterAttachment {
  id          String         @id @default(uuid())
  encounterId String
  type        AttachmentType
  url         String
  title       String?
  meta        Json?
  createdAt   DateTime       @default(now())
  encounter   Encounter      @relation(fields: [encounterId], references: [id], onDelete: Cascade)

  @@index([encounterId, type])
}

model Reminder {
  id          String         @id @default(uuid())
  userId      String         @db.Uuid
  personId    String?
  encounterId String?
  dueAt       DateTime
  status      ReminderStatus @default(PENDING)
  note        String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  encounter   Encounter?     @relation(fields: [encounterId], references: [id])
  person      Person?        @relation(fields: [personId], references: [id])
  owner       UserProfile    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dueAt])
  @@index([personId])
  @@index([encounterId])
}

model EventLog {
  id        String   @id @default(uuid())
  userId    String   @db.Uuid
  entity    String
  entityId  String
  action    String
  meta      Json?
  createdAt DateTime @default(now())

  @@index([userId, entity, entityId])
}

enum ContactType {
  EMAIL
  PHONE
  INSTAGRAM
  WHATSAPP
  TELEGRAM
  X
  LINKEDIN
  WEBSITE
  OTHER
}

enum SocialType {
  INSTAGRAM
  X
  LINKEDIN
  FACEBOOK
  TIKTOK
  YOUTUBE
  WEBSITE
  OTHER
}

enum AttachmentType {
  IMAGE
  VIDEO
  AUDIO
  FILE
  LINK
}

enum ReminderStatus {
  PENDING
  DONE
  SNOOZED
  CANCELED
}

enum SourceType {
  MANUAL
  IMPORT
  SYNC
}
